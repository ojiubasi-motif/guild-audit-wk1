// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;

import {Test,console} from "forge-std/Test.sol";
import {EthAirdropper, AirdropExploit} from "../src/RequirementViolation.sol";

contract RequirementExploit is Test {
    address private constant alice = address(1);
    EthAirdropper private airdropper;
    AirdropExploit private exploit;

    function setUp() public {
        airdropper = new EthAirdropper();
        deal(address(airdropper), 20e18);
        exploit = new AirdropExploit(address(airdropper));

    }

    function testCanDrainAirdropperContract() public {
        uint256 contractBalBeforAttack = address(airdropper).balance;
        console.log("contract bal before...",contractBalBeforAttack);
        
        vm.prank(alice);
        exploit.exploit();
        
        uint256 contractBalAfterAttack = address(airdropper).balance;

        console.log("contract bal after...",contractBalAfterAttack);

        assertEq(address(airdropper).balance, 0);
        assertEq(address(alice).balance, 20e18);
    }
}
